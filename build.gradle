plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.5'
	id "com.github.node-gradle.node" version "3.3.0"
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

}

tasks.named('test') {
	useJUnitPlatform()
}

// node 파일 위치
node {
	nodeModulesDir = file("$projectDir/front-end")
	version = '18.3.0'
	download = true
}

// npm-build
// npm-run-build를 실행하겠다는 의미
task npmBuild(type: NpmTask) {
	args = ['run', "build"]
}

// 프론트 실행 시 프론트 build 파일들 저장될 위치
task copyFrontEnd(type: Copy) {
	from "$projectDir/front-end/static"
	into 'build/resources/main/static/.'
}

// clean이 일어날 때 프론트에서 build 된 코드나 node 모듈 같이 삭제하겠다는 의미
task cleanFrontEnd(type: Delete) {
	delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules"
}

npmBuild.dependsOn npmInstall
copyFrontEnd.dependsOn npmBuild
compileJava.dependsOn copyFrontEnd

clean.dependsOn cleanFrontEnd